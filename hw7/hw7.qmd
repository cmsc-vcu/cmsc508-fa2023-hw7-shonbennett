---
title: Homework 7 - Creating a resume database
author: Shon Bennett
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This document represents a company-wide resume, showing what this rag-tag team of developers (poor college students) can do!

GITHUB URL:  https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-shonbennett

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

We have been given the task of promoting a company full of designers and developers taking on projects. This database functions as a company-wide resume used to display the skills, and roles of every employee.

## Crows-foot diagram

This Crows-foot diagram gives a snapshot of the attributes each entity holds, as well as display the relationship participation requirements amongst entities. 

```{mermaid}
%%| echo: false

erDiagram
    SKILLS }o--o{ PEOPLE : obtained
    ROLES }|--|{ PEOPLE : obtained
    
    SKILLS{
        int skills_id FK
        string name
        string description 
        string tag 
        string url 
        int time_commitment
    }

    PEOPLE {
        int people_id
        string first_name 
        string last_name
        string email
        string linkedin_url
        string headshot_url
        string discord_handle 
        string brief_bio 
        date date_joined 
    }

    ROLES {
        int role_id 
        string name 
        int sort_priority 
    }

```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table represents employees' skills, roles, basic portfolio information, and contact.  

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains all skills, a description for the skill and the amount of years committed to obtain this skill.  

Here is the data below!

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred in skills table query:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table has a role's id, aswell as the name of the role.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred in roles table query:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# Reports 

### List skill names, tags, and descriptions ordered by name

```{python}
#| echo: false
#| eval: true
sql = f"""
select name, tag, description
from skills
order by name;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT first_name, last_name, email 
FROM people 
ORDER BY last_name;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred in people table query:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List skill names of Person 1
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT a.name 
FROM skills a
INNER JOIN peopleskills b ON (b.skills_id = a.id)
WHERE b.people_id = 1
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred in peopleskills/skills join table query:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```
### List people names with Skill 6

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT a.first_name 
FROM people a
INNER JOIN peopleskills b ON b.people_id = a.id
WHERE b.skills_id = 6
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred in peopleskills/skills join table query:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT a.first_name 
FROM people a
INNER JOIN peopleroles b ON a.id = b.people_id
INNER JOIN roles c ON b.role_id = c.id 
WHERE c.name = "Developer"
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred in peopleskills/skills join table query:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT a.first_name, a.email 
FROM people a
LEFT JOIN peopleskills b ON a.id = b.people_id
WHERE b.skills_id IS NULL
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred in peopleskills/skills join table query:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT a.name
FROM skills a 
LEFT JOIN peopleskills b on (a.id=b.skills_id)
WHERE b.people_id IS NULL
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred in peopleskills/skills join table query:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT c.first_name, e.name
FROM peopleroles a 
INNER JOIN roles b ON (a.role_id=b.id)
INNER JOIN people c ON (c.id = a.people_id) 
INNER JOIN peopleskills d ON (d.people_id = c.id)
INNER JOIN skills e ON (e.id = d.skills_id)
WHERE b.name = "BOSS"
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred in peopleskills/skills join table query:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List ids and names of unused roles

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT a.id, a.name
FROM roles a
LEFT JOIN peopleroles b ON (a.id=b.role_id)
WHERE b.people_id IS NULL
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred in peopleskills/skills join table query:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

This was a pretty good experience. I finally understand how the sql databases are created. We write a bunch of create statements to create the tables, inserts to add data, and create queries to access this data. This assignment has given me the skills I need to make some significant progress on the database project before break. It's sometimes painful to complete these assignments, because there are a lot of moving parts, but I am always grateful that I worked on them. I learn a lot while doing it. 

